#!/usr/bin/env python
# Initial version http://delx.net.au/hg/jamesstuff/rev/706a749fc341
# Changes by Michael van der Kolff <mvanderkolff@gmail.com>

import SbsOnDemand.Feed
import signal
import subprocess
import urllib


#BASE_URL = "http://player.sbs.com.au"
#SWF_URL = "http://player.sbs.com.au/web/flash/standalone_video_player_application.swf"

def choose(options, allow_multi):
	skeys = sorted(options.keys())
	for i, key in enumerate(skeys):
		print " %d) %s" % (i+1, key)
	print " 0) Back"
	while True:
		try:
			values = map(int, raw_input("Choose> ").split())
			if len(values) == 0:
				continue
			if 0 in values:
				return
			values = [options[skeys[value-1]] for value in values]
			if allow_multi:
				return values
			else:
				if len(values) == 1:
					return values[0]
		except ValueError:
			pass

def download_video(video):
	filename = video.title + ".flv"
	media = video.getMedia()['content'][-1]
	if media.baseUrl.startswith("rtmp://"):
		download_rtmp(filename, media)
	else:
		download_urllib(filename, media)

def download_rtmp(filename, mediaEntry):
	cmd = [
		"rtmpdump",
		"--resume",
		"-o", filename
	] + mediaEntry.getRtmpdumpCommand()
	try:
		p = subprocess.Popen(cmd)
		p.wait()
	except KeyboardInterrupt:
		print "Cancelled", cmd
		try:
			p.terminate()
			p.wait()
		except KeyboardInterrupt:
			p.send_signal(signal.SIGKILL)
			p.wait()

def download_urllib(filename, mediaEntry):
	url = mediaEntry.url
	print "Downloading: %s -> %s" % (url, filename)
	try:
		src = urllib.urlopen(url)
		dst = open(filename, "w")
		shutil.copyfileobj(src, dst)
	except KeyboardInterrupt:
		print "\nCancelled", url
	finally:
		src.close()
		dst.close()

def main():
	programs = SbsOnDemand.Feed.getDefaultFeeds()['Programs']
	possibleVideos = programs.getVideos(itemsPerPage=programs.totalResults)
	videosByCategory = dict()
	for i,video in enumerate(possibleVideos):
		videosByCategory[video.programName] = videosByCategory.get(video.programName,dict())
		videosByCategory[video.programName][video.title] = video
	while True:
		category = choose(videosByCategory, allow_multi=False)
		if category is None:
			continue
		while True:
			generator = choose(category, allow_multi=True)
			if generator is None:
				break
			for video in generator:
				download_video(video)

if __name__ == "__main__":
	try:
		main()
	except (KeyboardInterrupt, EOFError):
		print "\nExiting..."

